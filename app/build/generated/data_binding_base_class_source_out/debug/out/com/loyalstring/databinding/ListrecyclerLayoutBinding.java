// Generated by view binder compiler. Do not edit!
package com.loyalstring.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.loyalstring.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListrecyclerLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView lbarcode;

  @NonNull
  public final ImageView ldelete;

  @NonNull
  public final ImageView ledit;

  @NonNull
  public final TextView lgwt;

  @NonNull
  public final TextView litemcode;

  @NonNull
  public final TextView lproduct;

  private ListrecyclerLayoutBinding(@NonNull LinearLayout rootView, @NonNull TextView lbarcode,
      @NonNull ImageView ldelete, @NonNull ImageView ledit, @NonNull TextView lgwt,
      @NonNull TextView litemcode, @NonNull TextView lproduct) {
    this.rootView = rootView;
    this.lbarcode = lbarcode;
    this.ldelete = ldelete;
    this.ledit = ledit;
    this.lgwt = lgwt;
    this.litemcode = litemcode;
    this.lproduct = lproduct;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListrecyclerLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListrecyclerLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.listrecycler_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListrecyclerLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.lbarcode;
      TextView lbarcode = ViewBindings.findChildViewById(rootView, id);
      if (lbarcode == null) {
        break missingId;
      }

      id = R.id.ldelete;
      ImageView ldelete = ViewBindings.findChildViewById(rootView, id);
      if (ldelete == null) {
        break missingId;
      }

      id = R.id.ledit;
      ImageView ledit = ViewBindings.findChildViewById(rootView, id);
      if (ledit == null) {
        break missingId;
      }

      id = R.id.lgwt;
      TextView lgwt = ViewBindings.findChildViewById(rootView, id);
      if (lgwt == null) {
        break missingId;
      }

      id = R.id.litemcode;
      TextView litemcode = ViewBindings.findChildViewById(rootView, id);
      if (litemcode == null) {
        break missingId;
      }

      id = R.id.lproduct;
      TextView lproduct = ViewBindings.findChildViewById(rootView, id);
      if (lproduct == null) {
        break missingId;
      }

      return new ListrecyclerLayoutBinding((LinearLayout) rootView, lbarcode, ldelete, ledit, lgwt,
          litemcode, lproduct);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
