// Generated by view binder compiler. Do not edit!
package com.loyalstring.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.loyalstring.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class StockverfylayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout mainholder;

  @NonNull
  public final HorizontalScrollView reportitemscroll;

  @NonNull
  public final TextView svdate;

  @NonNull
  public final LinearLayout svholder;

  @NonNull
  public final TextView svmqty;

  @NonNull
  public final TextView svmwt;

  @NonNull
  public final RelativeLayout svritemhold;

  @NonNull
  public final TextView svstatus;

  @NonNull
  public final ImageView svstatusimg;

  @NonNull
  public final ImageView svstatusimg1;

  @NonNull
  public final LinearLayout svstatusimgholder;

  @NonNull
  public final TextView svtqty;

  @NonNull
  public final TextView svtwt;

  @NonNull
  public final TextView svumqty;

  @NonNull
  public final TextView svunwt;

  private StockverfylayoutBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout mainholder, @NonNull HorizontalScrollView reportitemscroll,
      @NonNull TextView svdate, @NonNull LinearLayout svholder, @NonNull TextView svmqty,
      @NonNull TextView svmwt, @NonNull RelativeLayout svritemhold, @NonNull TextView svstatus,
      @NonNull ImageView svstatusimg, @NonNull ImageView svstatusimg1,
      @NonNull LinearLayout svstatusimgholder, @NonNull TextView svtqty, @NonNull TextView svtwt,
      @NonNull TextView svumqty, @NonNull TextView svunwt) {
    this.rootView = rootView;
    this.mainholder = mainholder;
    this.reportitemscroll = reportitemscroll;
    this.svdate = svdate;
    this.svholder = svholder;
    this.svmqty = svmqty;
    this.svmwt = svmwt;
    this.svritemhold = svritemhold;
    this.svstatus = svstatus;
    this.svstatusimg = svstatusimg;
    this.svstatusimg1 = svstatusimg1;
    this.svstatusimgholder = svstatusimgholder;
    this.svtqty = svtqty;
    this.svtwt = svtwt;
    this.svumqty = svumqty;
    this.svunwt = svunwt;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static StockverfylayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static StockverfylayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.stockverfylayout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static StockverfylayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.mainholder;
      RelativeLayout mainholder = ViewBindings.findChildViewById(rootView, id);
      if (mainholder == null) {
        break missingId;
      }

      id = R.id.reportitemscroll;
      HorizontalScrollView reportitemscroll = ViewBindings.findChildViewById(rootView, id);
      if (reportitemscroll == null) {
        break missingId;
      }

      id = R.id.svdate;
      TextView svdate = ViewBindings.findChildViewById(rootView, id);
      if (svdate == null) {
        break missingId;
      }

      id = R.id.svholder;
      LinearLayout svholder = ViewBindings.findChildViewById(rootView, id);
      if (svholder == null) {
        break missingId;
      }

      id = R.id.svmqty;
      TextView svmqty = ViewBindings.findChildViewById(rootView, id);
      if (svmqty == null) {
        break missingId;
      }

      id = R.id.svmwt;
      TextView svmwt = ViewBindings.findChildViewById(rootView, id);
      if (svmwt == null) {
        break missingId;
      }

      RelativeLayout svritemhold = (RelativeLayout) rootView;

      id = R.id.svstatus;
      TextView svstatus = ViewBindings.findChildViewById(rootView, id);
      if (svstatus == null) {
        break missingId;
      }

      id = R.id.svstatusimg;
      ImageView svstatusimg = ViewBindings.findChildViewById(rootView, id);
      if (svstatusimg == null) {
        break missingId;
      }

      id = R.id.svstatusimg1;
      ImageView svstatusimg1 = ViewBindings.findChildViewById(rootView, id);
      if (svstatusimg1 == null) {
        break missingId;
      }

      id = R.id.svstatusimgholder;
      LinearLayout svstatusimgholder = ViewBindings.findChildViewById(rootView, id);
      if (svstatusimgholder == null) {
        break missingId;
      }

      id = R.id.svtqty;
      TextView svtqty = ViewBindings.findChildViewById(rootView, id);
      if (svtqty == null) {
        break missingId;
      }

      id = R.id.svtwt;
      TextView svtwt = ViewBindings.findChildViewById(rootView, id);
      if (svtwt == null) {
        break missingId;
      }

      id = R.id.svumqty;
      TextView svumqty = ViewBindings.findChildViewById(rootView, id);
      if (svumqty == null) {
        break missingId;
      }

      id = R.id.svunwt;
      TextView svunwt = ViewBindings.findChildViewById(rootView, id);
      if (svunwt == null) {
        break missingId;
      }

      return new StockverfylayoutBinding((RelativeLayout) rootView, mainholder, reportitemscroll,
          svdate, svholder, svmqty, svmwt, svritemhold, svstatus, svstatusimg, svstatusimg1,
          svstatusimgholder, svtqty, svtwt, svumqty, svunwt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
