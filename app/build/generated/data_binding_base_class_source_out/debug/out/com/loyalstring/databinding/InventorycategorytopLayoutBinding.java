// Generated by view binder compiler. Do not edit!
package com.loyalstring.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.loyalstring.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class InventorycategorytopLayoutBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final LinearLayout catlay;

  @NonNull
  public final TextView ccagetext;

  @NonNull
  public final TextView ccbarcodetext;

  @NonNull
  public final TextView ccitemcodetext;

  @NonNull
  public final TextView ccpuritytext;

  @NonNull
  public final RelativeLayout imgholder;

  @NonNull
  public final TextView itMPieces;

  @NonNull
  public final TextView itPieces;

  @NonNull
  public final TextView itage;

  @NonNull
  public final TextView itbox;

  @NonNull
  public final HorizontalScrollView itemscroll;

  @NonNull
  public final TextView itmatchnwt;

  @NonNull
  public final TextView itmatchstone;

  @NonNull
  public final TextView itmgwt;

  @NonNull
  public final TextView itmqty;

  @NonNull
  public final TextView itproduct;

  @NonNull
  public final TextView itsno;

  @NonNull
  public final ImageView itstatus;

  @NonNull
  public final TextView ittgwt;

  @NonNull
  public final TextView ittnwt;

  @NonNull
  public final TextView ittqty;

  @NonNull
  public final TextView ittstonewt;

  @NonNull
  public final View scrollIndicator;

  @NonNull
  public final RelativeLayout topitemlay;

  private InventorycategorytopLayoutBinding(@NonNull FrameLayout rootView,
      @NonNull LinearLayout catlay, @NonNull TextView ccagetext, @NonNull TextView ccbarcodetext,
      @NonNull TextView ccitemcodetext, @NonNull TextView ccpuritytext,
      @NonNull RelativeLayout imgholder, @NonNull TextView itMPieces, @NonNull TextView itPieces,
      @NonNull TextView itage, @NonNull TextView itbox, @NonNull HorizontalScrollView itemscroll,
      @NonNull TextView itmatchnwt, @NonNull TextView itmatchstone, @NonNull TextView itmgwt,
      @NonNull TextView itmqty, @NonNull TextView itproduct, @NonNull TextView itsno,
      @NonNull ImageView itstatus, @NonNull TextView ittgwt, @NonNull TextView ittnwt,
      @NonNull TextView ittqty, @NonNull TextView ittstonewt, @NonNull View scrollIndicator,
      @NonNull RelativeLayout topitemlay) {
    this.rootView = rootView;
    this.catlay = catlay;
    this.ccagetext = ccagetext;
    this.ccbarcodetext = ccbarcodetext;
    this.ccitemcodetext = ccitemcodetext;
    this.ccpuritytext = ccpuritytext;
    this.imgholder = imgholder;
    this.itMPieces = itMPieces;
    this.itPieces = itPieces;
    this.itage = itage;
    this.itbox = itbox;
    this.itemscroll = itemscroll;
    this.itmatchnwt = itmatchnwt;
    this.itmatchstone = itmatchstone;
    this.itmgwt = itmgwt;
    this.itmqty = itmqty;
    this.itproduct = itproduct;
    this.itsno = itsno;
    this.itstatus = itstatus;
    this.ittgwt = ittgwt;
    this.ittnwt = ittnwt;
    this.ittqty = ittqty;
    this.ittstonewt = ittstonewt;
    this.scrollIndicator = scrollIndicator;
    this.topitemlay = topitemlay;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static InventorycategorytopLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static InventorycategorytopLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.inventorycategorytop_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static InventorycategorytopLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.catlay;
      LinearLayout catlay = ViewBindings.findChildViewById(rootView, id);
      if (catlay == null) {
        break missingId;
      }

      id = R.id.ccagetext;
      TextView ccagetext = ViewBindings.findChildViewById(rootView, id);
      if (ccagetext == null) {
        break missingId;
      }

      id = R.id.ccbarcodetext;
      TextView ccbarcodetext = ViewBindings.findChildViewById(rootView, id);
      if (ccbarcodetext == null) {
        break missingId;
      }

      id = R.id.ccitemcodetext;
      TextView ccitemcodetext = ViewBindings.findChildViewById(rootView, id);
      if (ccitemcodetext == null) {
        break missingId;
      }

      id = R.id.ccpuritytext;
      TextView ccpuritytext = ViewBindings.findChildViewById(rootView, id);
      if (ccpuritytext == null) {
        break missingId;
      }

      id = R.id.imgholder;
      RelativeLayout imgholder = ViewBindings.findChildViewById(rootView, id);
      if (imgholder == null) {
        break missingId;
      }

      id = R.id.itMPieces;
      TextView itMPieces = ViewBindings.findChildViewById(rootView, id);
      if (itMPieces == null) {
        break missingId;
      }

      id = R.id.itPieces;
      TextView itPieces = ViewBindings.findChildViewById(rootView, id);
      if (itPieces == null) {
        break missingId;
      }

      id = R.id.itage;
      TextView itage = ViewBindings.findChildViewById(rootView, id);
      if (itage == null) {
        break missingId;
      }

      id = R.id.itbox;
      TextView itbox = ViewBindings.findChildViewById(rootView, id);
      if (itbox == null) {
        break missingId;
      }

      id = R.id.itemscroll;
      HorizontalScrollView itemscroll = ViewBindings.findChildViewById(rootView, id);
      if (itemscroll == null) {
        break missingId;
      }

      id = R.id.itmatchnwt;
      TextView itmatchnwt = ViewBindings.findChildViewById(rootView, id);
      if (itmatchnwt == null) {
        break missingId;
      }

      id = R.id.itmatchstone;
      TextView itmatchstone = ViewBindings.findChildViewById(rootView, id);
      if (itmatchstone == null) {
        break missingId;
      }

      id = R.id.itmgwt;
      TextView itmgwt = ViewBindings.findChildViewById(rootView, id);
      if (itmgwt == null) {
        break missingId;
      }

      id = R.id.itmqty;
      TextView itmqty = ViewBindings.findChildViewById(rootView, id);
      if (itmqty == null) {
        break missingId;
      }

      id = R.id.itproduct;
      TextView itproduct = ViewBindings.findChildViewById(rootView, id);
      if (itproduct == null) {
        break missingId;
      }

      id = R.id.itsno;
      TextView itsno = ViewBindings.findChildViewById(rootView, id);
      if (itsno == null) {
        break missingId;
      }

      id = R.id.itstatus;
      ImageView itstatus = ViewBindings.findChildViewById(rootView, id);
      if (itstatus == null) {
        break missingId;
      }

      id = R.id.ittgwt;
      TextView ittgwt = ViewBindings.findChildViewById(rootView, id);
      if (ittgwt == null) {
        break missingId;
      }

      id = R.id.ittnwt;
      TextView ittnwt = ViewBindings.findChildViewById(rootView, id);
      if (ittnwt == null) {
        break missingId;
      }

      id = R.id.ittqty;
      TextView ittqty = ViewBindings.findChildViewById(rootView, id);
      if (ittqty == null) {
        break missingId;
      }

      id = R.id.ittstonewt;
      TextView ittstonewt = ViewBindings.findChildViewById(rootView, id);
      if (ittstonewt == null) {
        break missingId;
      }

      id = R.id.scrollIndicator;
      View scrollIndicator = ViewBindings.findChildViewById(rootView, id);
      if (scrollIndicator == null) {
        break missingId;
      }

      id = R.id.topitemlay;
      RelativeLayout topitemlay = ViewBindings.findChildViewById(rootView, id);
      if (topitemlay == null) {
        break missingId;
      }

      return new InventorycategorytopLayoutBinding((FrameLayout) rootView, catlay, ccagetext,
          ccbarcodetext, ccitemcodetext, ccpuritytext, imgholder, itMPieces, itPieces, itage, itbox,
          itemscroll, itmatchnwt, itmatchstone, itmgwt, itmqty, itproduct, itsno, itstatus, ittgwt,
          ittnwt, ittqty, ittstonewt, scrollIndicator, topitemlay);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
